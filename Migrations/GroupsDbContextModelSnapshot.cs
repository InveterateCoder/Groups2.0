// <auto-generated />
using System;
using Groups2._0.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace Groups2._0.Migrations
{
  [DbContext(typeof(GroupsDbContext))]
  partial class GroupsDbContextModelSnapshot : ModelSnapshot
  {
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder
          .HasAnnotation("ProductVersion", "3.1.9")
          .HasAnnotation("Relational:MaxIdentifierLength", 64);

      modelBuilder.Entity("Groups2._0.Models.Chatterer", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<int>("AccessFailedCount")
                      .HasColumnType("int");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("ConnectionId")
                      .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                      .HasMaxLength(64);

            b.Property<string>("Email")
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                      .HasMaxLength(256);

            b.Property<bool>("EmailConfirmed")
                      .HasColumnType("tinyint(1)");

            b.Property<string>("Group")
                      .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                      .HasMaxLength(64);

            b.Property<long>("GroupLastCleaned")
                      .HasColumnType("bigint");

            b.Property<string>("GroupPassword")
                      .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                      .HasMaxLength(32);

            b.Property<string>("InGroupId")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("InGroupPassword")
                      .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                      .HasMaxLength(32);

            b.Property<long>("LastActive")
                      .HasColumnType("bigint");

            b.Property<long>("LastNotified")
                      .HasColumnType("bigint");

            b.Property<bool>("LockoutEnabled")
                      .HasColumnType("tinyint(1)");

            b.Property<DateTimeOffset?>("LockoutEnd")
                      .HasColumnType("datetime(6)");

            b.Property<string>("NormalizedEmail")
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                      .HasMaxLength(256);

            b.Property<string>("NormalizedUserName")
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                      .HasMaxLength(256);

            b.Property<string>("PasswordHash")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("PhoneNumber")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<bool>("PhoneNumberConfirmed")
                      .HasColumnType("tinyint(1)");

            b.Property<string>("SecurityStamp")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<bool>("TwoFactorEnabled")
                      .HasColumnType("tinyint(1)");

            b.Property<string>("UserName")
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                      .HasMaxLength(256);

            b.Property<string>("WebSubscription")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("NormalizedEmail")
                      .HasName("EmailIndex");

            b.HasIndex("NormalizedUserName")
                      .IsUnique()
                      .HasName("UserNameIndex");

            b.ToTable("AspNetUsers");
          });

      modelBuilder.Entity("Groups2._0.Models.Message", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("From")
                      .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                      .HasMaxLength(64);

            b.Property<string>("GroupId")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<long>("JsTime")
                      .HasColumnType("bigint");

            b.Property<long>("SharpTime")
                      .HasColumnType("bigint");

            b.Property<string>("StringTime")
                      .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                      .HasMaxLength(64);

            b.Property<string>("Text")
                      .HasColumnType("longtext CHARACTER SET utf8mb4")
                      .HasMaxLength(10000);

            b.HasKey("Id");

            b.ToTable("Messages");
          });

      modelBuilder.Entity("Groups2._0.Models.RegData", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<int>("Code")
                      .HasColumnType("int");

            b.Property<string>("Email")
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                      .HasMaxLength(256);

            b.Property<string>("Name")
                      .HasColumnType("varchar(64) CHARACTER SET utf8mb4")
                      .HasMaxLength(64);

            b.Property<string>("Password")
                      .HasColumnType("varchar(32) CHARACTER SET utf8mb4")
                      .HasMaxLength(32);

            b.Property<long>("RequestTime")
                      .HasColumnType("bigint");

            b.HasKey("Id");

            b.ToTable("RegRequests");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
          {
            b.Property<string>("Id")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("ConcurrencyStamp")
                      .IsConcurrencyToken()
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("Name")
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                      .HasMaxLength(256);

            b.Property<string>("NormalizedName")
                      .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                      .HasMaxLength(256);

            b.HasKey("Id");

            b.HasIndex("NormalizedName")
                      .IsUnique()
                      .HasName("RoleNameIndex");

            b.ToTable("AspNetRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("ClaimType")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("ClaimValue")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("RoleId")
                      .IsRequired()
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("RoleId");

            b.ToTable("AspNetRoleClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.Property<int>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("int");

            b.Property<string>("ClaimType")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("ClaimValue")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("Id");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserClaims");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.Property<string>("LoginProvider")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("ProviderKey")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("ProviderDisplayName")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.Property<string>("UserId")
                      .IsRequired()
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("LoginProvider", "ProviderKey");

            b.HasIndex("UserId");

            b.ToTable("AspNetUserLogins");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("RoleId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.HasKey("UserId", "RoleId");

            b.HasIndex("RoleId");

            b.ToTable("AspNetUserRoles");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.Property<string>("UserId")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("LoginProvider")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("Name")
                      .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

            b.Property<string>("Value")
                      .HasColumnType("longtext CHARACTER SET utf8mb4");

            b.HasKey("UserId", "LoginProvider", "Name");

            b.ToTable("AspNetUserTokens");
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
          {
            b.HasOne("Groups2._0.Models.Chatterer", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
          {
            b.HasOne("Groups2._0.Models.Chatterer", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
          {
            b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                      .WithMany()
                      .HasForeignKey("RoleId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("Groups2._0.Models.Chatterer", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });

      modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
          {
            b.HasOne("Groups2._0.Models.Chatterer", null)
                      .WithMany()
                      .HasForeignKey("UserId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();
          });
#pragma warning restore 612, 618
    }
  }
}
